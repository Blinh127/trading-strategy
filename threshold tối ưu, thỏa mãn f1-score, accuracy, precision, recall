from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import numpy as np


def optimize_threshold(y_true, y_prob):
    best_threshold = 0.5  # Default value
    best_metrics = (0, 0, 0, 0)  # (accuracy, precision, recall, f1)
    
    thresholds = np.linspace(0, 1, 100)  # Duyệt qua 100 ngưỡng từ 0 đến 1
    for threshold in thresholds:
        y_pred = (y_prob >= threshold).astype(int)  # Chuyển xác suất thành nhãn dự đoán
        
        acc = accuracy_score(y_true, y_pred)
        prec = precision_score(y_true, y_pred, zero_division=0)
        rec = recall_score(y_true, y_pred)
        f1 = f1_score(y_true, y_pred)
        
        # Kiểm tra điều kiện: tất cả metric phải >= 70%
        if  acc > 0.7 and f1 > 0.7 and prec > 0.7 and rec > 0.7:
            best_threshold = threshold
            best_metrics = (acc, prec, rec, f1)
            
    return best_threshold, best_metrics

# Áp dụng cho dữ liệu thực tế
y_true = y_val  # Nhãn thực tế từ tập validation
y_prob = y_pred_proba  # Xác suất dự đoán từ mô hình

best_threshold, best_metrics = optimize_threshold(y_true, y_prob)
print(f"Best Threshold: {best_threshold}, Metrics: {best_metrics}")

# Dự đoán lại với ngưỡng tối ưu
y_pred_optimized = (y_prob >= best_threshold).astype(int)
cm_optimized = confusion_matrix(y_true, y_pred_optimized)
print("Optimized Confusion Matrix:")
print(cm_optimized)

# In báo cáo đánh giá tối ưu
report_optimized = classification_report(y_true, y_pred_optimized, digits=4)
print("Optimized Classification Report:")
print(report_optimized)
